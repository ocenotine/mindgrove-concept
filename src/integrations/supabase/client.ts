
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jlyxtvwnjrxrdvxnneii.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpseXh0dnduanJ4cmR2eG5uZWlpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzMjI0NjgsImV4cCI6MjA1ODg5ODQ2OH0.kQuW3Qy8Q1qpArvchZXUV-6FkzIu3Ri63DEWgbraURw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true
  }
});

// Add custom database types for our new tables
export type WellbeingData = {
  id: string;
  user_id: string;
  date: string;
  focus: number;
  stress: number;
  notes?: string;
  created_at?: string;
  updated_at?: string;
};

export type QuizQuestion = {
  question: string;
  options: string[];
  answer: string;
  explanation: string;
};

export type StoredQuiz = {
  id: string;
  user_id: string;
  document_id?: string;
  name: string;
  questions: QuizQuestion[];
  difficulty: string;
  last_taken?: string;
  created_at?: string;
  updated_at?: string;
};

// Helper function to clean up auth state to prevent login issues
export const cleanupAuthState = () => {
  // Remove standard auth tokens
  localStorage.removeItem('supabase.auth.token');
  
  // Remove all Supabase auth keys from localStorage
  Object.keys(localStorage).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      console.log("Removing auth key:", key);
      localStorage.removeItem(key);
    }
  });
  
  // Remove from sessionStorage if in use
  Object.keys(sessionStorage || {}).forEach((key) => {
    if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
      sessionStorage.removeItem(key);
    }
  });
};

// Helper function to create a profile if it doesn't exist
export const ensureUserProfile = async (userId: string, email: string, accountType: string = 'student') => {
  try {
    console.log("Ensuring profile exists for:", userId, email, accountType);
    
    // Check if profile exists
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error && error.code !== 'PGRST116') {
      console.error("Error checking profile:", error);
      return;
    }
    
    if (!data || error?.code === 'PGRST116') {
      // Profile doesn't exist, create it
      console.log("Creating new profile for user:", userId, email, accountType);
      const { error: insertError } = await supabase
        .from('profiles')
        .insert({
          id: userId,
          email: email,
          account_type: accountType
        });
      
      if (insertError) {
        console.error("Error creating profile:", insertError);
      } else {
        console.log("Profile created successfully");
      }
    } else {
      console.log("Profile exists:", data);
      
      // If account type is admin but not set in profile, update it
      if (accountType === 'admin' && data.account_type !== 'admin') {
        const { error: updateError } = await supabase
          .from('profiles')
          .update({ account_type: 'admin' })
          .eq('id', userId);
        
        if (updateError) {
          console.error("Error updating admin account type:", updateError);
        } else {
          console.log("Updated account_type to admin");
        }
      }
    }
    
    // Special handling for admin user
    if (email === 'admin@mindgrove.com') {
      console.log("Detected admin email, ensuring admin privileges");
      const { error: updateError } = await supabase
        .from('profiles')
        .update({ account_type: 'admin' })
        .eq('id', userId);
      
      if (updateError) {
        console.error("Error updating admin:", updateError);
      } else {
        console.log("Admin profile updated successfully");
      }
    }
  } catch (err) {
    console.error("Error in ensureUserProfile:", err);
  }
};

// Helper function to get a user's profile data
export const getUserProfile = async (userId: string) => {
  if (!userId) return null;
  
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
      
    if (error) {
      console.error("Error fetching profile:", error);
      return null;
    }
    
    return data;
  } catch (err) {
    console.error("Error in getUserProfile:", err);
    return null;
  }
};
